
services:
  redis:
    image: redis:7
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  web:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "uv run python manage.py collectstatic --noinput &&
             uv run python manage.py migrate &&
             uv run gunicorn todosaga.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy  # ✅ redis가 준비될 때까지 대기
      db:
        condition: service_healthy
    restart: always

  rq-worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: sh -c "python manage.py rqworker default"
    depends_on:
      redis:
        condition: service_healthy  # ✅ redis가 정상적으로 실행된 후 시작
      web:
        condition: service_started  # ✅ web 서비스가 실행된 후 시작
    env_file:
      - .env
    restart: always

  db:
    image: postgres:15
    environment:
      POSTGRES_DB: todosaga_db
      POSTGRES_HOST_AUTH_METHOD: trust
      
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "example_user", "-d", "example_db"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 10s

volumes:
  static_volume:
    driver: local
  media_volume:
    driver: local
